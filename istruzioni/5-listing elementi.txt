dopo aver lavorato sul front end adesso lavoro sulle query nel db

1 step
Creo un Db in Mamp che chiamo laravel
Poi in env.php (nella route di Ecommerce), scrivo 
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=8889
DB_DATABASE=laravel
DB_USERNAME=root
DB_PASSWORD=root
DB_SOCKET=/Applications/MAMP/tmp/mysql/mysql.sock


Per windows questa ultima istruzione NON serve serve pero' modfifcare php.ini 
quindi a ternminale php --ini indica dove è il file php.ini (php info )
Identificato il file php.ini occorre scommentare (togliere ;) l'estensione pdo_mysql
Spengo e accendo MAMP
https://www.youtube.com/watch?v=B3rVfhPMo_0

2 step 
In questo Db devo creare una tabella, attraverso un model che cro a terminale 
 php artisan make:model Customer -m
 
In questo modo si creano due file.
App/Models/customer.php
database/migration/2022_01_26_161811_create_customers_table.php
In questo ultimo file creo la tabella 
 public function up()
    {
        Schema::create('customers', function (Blueprint $table) {
            $table->id();
            $table->string('email');
            $table->string('password');
            $table->string('nome');
            $table->string('cognome');
            $table->string('indirizzo');
            $table->string('citta');
            $table->string('nazione');
            $table->timestamps();
        });
    }
Invece in App/Providers/AppServiceProvider

namespace App\Providers;

use Illuminate\Support\ServiceProvider;
use Illuminate\Support\Facades\Schema;
use Illuminate\Pagination\Paginator;

    public function boot()
    {
        Schema::defaultStringLength(255);
        Paginator::useBootstrap();
    }
    
Con la prima istruzone definisco che di default la lunghezza della stringa
nella tabella Customers nel Laravel 3 e di 255

Con la seconda La parte Paginator   si usa 
per costruire lei link di pagination, usando bootstrap 

poi a terminale : php artisan migrate
Con questo comando nel DB laravel3 comparira la tabelle cusomer 
php artisan migrate:rollback
E' il comando di annulamento della migrazione 

si crea cosi la tabella che popolo con il comando  

php artisan tinker

con questo comando creo prima un istanza 
$customer= new App\Models\Customer   poi
$customer->email= 'admin@test.it'
etc...
$customer->save()

https://www.laramind.com/blog/laravel-migration-approfondimenti/esami_laboratorio

3 step 
Per eseguire un query nel DB e ritrovare gli utenti registrati nel DB, nel file listaUtenti.php
vado nel controller Appa/Http/Controllers/AdminController.php
E applico i due possibili metodi
-query builder
-Models eloquent

use Illuminate\Http\Request;
//nel caso si utilizzi il metodo query builder
use Illuminate\Support\Facades\DB;
//nel caso si utilizzi per le query i models 
use App\Models\Customer;
Poi 

   public function listaUtenti()
    {
        //query  builder
        // $customers= DB::table('customers')
        //      ->get();
        // $customers= DB::table('customers')
        //      ->simplePaginate(1);
        //eloquent che richiede use App\Models\Customer
        //$customers = Customer::get();
        
        // oppure: Models Eloquent
        //$customers = Customer::all();
        //$customers = Customer::orderBy('email', 'asc')->get();
        //$customers = Customer::orderBy('email', 'asc')->paginate(1);
        
        //torna il risiultato della query organizzato per pagina 1 = un record per ogni pagination
        $customers = Customer::paginate(1);
        //ritorna la vista aggiungendo il risultato della query 
        return view('amministrazione.listaUtenti')->with('customers', $customers);
    }
    pagination in php
    https://www.codexworld.com/php-pagination-class-with-mysql/
    
    4 step 
    Per visualizzare nella forma pagination, i risultati della query 
    in resources/views/views/amministrazione/listaUtenti.blade.php
    
            
                    @foreach ($customers as $customer)
                        <tr class="text-center">
                            <td scope="col">{{ $customer->email }}</td>
                            <td scope="col"> <i class="fas fa-edit"></i></td>
                            <td scope="col"> <i class="fas fa-trash-alt"></i></td>
                        </tr>
                    @endforeach
                    {{-- {{ $customers->links() }} --}}


        <div class="d-flex justify-content-center">
            {!! $customers->links() !!}

        </div>
 Non dimenticando che i links sono creati con bootstrap. Infatti in 
 AppServiceProvider.php
 
 use Illuminate\Pagination\Paginator;
 
   public function boot()
    {
        Schema::defaultStringLength(255);
        Paginator::useBootstrap();
    }
    
-----------------------------------------

Differenza Query PHP e Laravel

Creo un Db 
•	PHP, a mano 
•	Laravel a mano 

Mi collego al DB  
•	PHP istanza della classe PDO, 
•	Laravel file env.php

Creo una tabella Customer del DB: 
•	PHP a mano, 
•	Laravel con le migrazioni (MODEL) Punto 2 delle istruzioni

Popolo la tabella customers: 
•	PHP a mano 
•	Laravel il comando php tinker (pto 2) o  a mano

Estraggo i dati dalla tabella: 
•	PHP eseguo la query SELECT *, 
•	Laravel metodo statico all della classe Customer creata quando abbiamo usato il comando
Php artisan make:model Customer. Questo grazie alla libreria Eloquent di Laravel 

Visualizzo il risultato della Query 
•	PHP WHILE ($row=FETCH..) per visualizzare il contenuto del DB
•	In laravel foreach passando il risultato della query in AdminController


